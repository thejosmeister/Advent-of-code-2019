
import java.util.Arrays;
import java.util.Scanner;

public class Day7
{
//    public static int[] code =
//            new int[]{ 3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 101, 14, 135, 224, 101, -69, 224, 224, 4,
//                    224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 224, 223, 223, 102, 90, 169, 224, 1001, 224, -4590,
//                    224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 1102, 90, 45, 224, 1001,
//                    224, -4050, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1001, 144, 32,
//                    224, 101, -72, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 223, 224, 223, 1102, 36,
//                    93, 225, 1101, 88, 52, 225, 1002, 102, 38, 224, 101, -3534, 224, 224, 4, 224, 102, 8, 223, 223,
//                    101, 4, 224, 224, 1, 223, 224, 223, 1102, 15, 57, 225, 1102, 55, 49, 225, 1102, 11, 33, 225,
//                    1101, 56, 40, 225, 1, 131, 105, 224, 101, -103, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224,
//                    2, 224, 1, 224, 223, 223, 1102, 51, 39, 225, 1101, 45, 90, 225, 2, 173, 139, 224, 101, -495,
//                    224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 5, 224, 1, 223, 224, 223, 1101, 68, 86, 224,
//                    1001, 224, -154, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 4, 223, 99,
//                    0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999,
//                    1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999,
//                    1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225,
//                    1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225,
//                    1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224,
//                    329, 1001, 223, 1, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 344, 101, 1, 223,
//                    223, 1008, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 359, 1001, 223, 1, 223, 107, 226, 677,
//                    224, 1002, 223, 2, 223, 1005, 224, 374, 101, 1, 223, 223, 1107, 677, 226, 224, 102, 2, 223, 223,
//                    1006, 224, 389, 101, 1, 223, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 404, 1001,
//                    223, 1, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 419, 101, 1, 223, 223, 1007, 677,
//                    226, 224, 1002, 223, 2, 223, 1006, 224, 434, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223,
//                    2, 223, 1006, 224, 449, 101, 1, 223, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 464,
//                    1001, 223, 1, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 479, 1001, 223, 1, 223,
//                    1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 494, 1001, 223, 1, 223, 1108, 677, 677, 224,
//                    102, 2, 223, 223, 1006, 224, 509, 101, 1, 223, 223, 1008, 677, 677, 224, 102, 2, 223, 223, 1005,
//                    224, 524, 1001, 223, 1, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 539, 101, 1, 223,
//                    223, 7, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 554, 101, 1, 223, 223, 1108, 226, 677, 224,
//                    1002, 223, 2, 223, 1006, 224, 569, 1001, 223, 1, 223, 107, 677, 677, 224, 102, 2, 223, 223,
//                    1005, 224, 584, 101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 599, 101, 1,
//                    223, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 1008, 677,
//                    226, 224, 1002, 223, 2, 223, 1005, 224, 629, 1001, 223, 1, 223, 7, 226, 677, 224, 102, 2, 223,
//                    223, 1005, 224, 644, 101, 1, 223, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 659, 1001,
//                    223, 1, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99,
//                    226 };
//    public static int[] code = new int[] {3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
//1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
//999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99};
//    public static int[] code = new int[]{1,8,9,7,4,7,99,0,10,20};
//    public static int[] code = new int[]{2,8,9,7,4,7,99,0,10,20};
//    public static int[] code = new int[]{3,8,4,8,99,7,99,0,10,20};
//    public static int[] code = new int[]{5,7,9,5,4,8,99,0,6,20};
//    public static int[] code = new int[]{6,3,9,5,7,8,99,0,6,20};
//    public static int[] code = new int[]{7,8,9,7,4,7,99,0,20,20};
//    public static int[] code = new int[]{8,8,9,7,4,7,99,0,10,20};
//    public static int[] code = new int[]{99};
//    public static int[] code = new int[]{101,8,9,7,4,7,99,0,20,20};
//    public static int[] code = new int[]{102,8,9,7,4,7,99,0,20,40};
//    public static int[] code = new int[]{104,6,99,0,20,20};
//    public static int[] code = new int[]{105,0,9,105,4,8,99,0,6,20};
//    public static int[] code = new int[]{106,4,9,106,0,8,99,0,6,20};
// public static int[] code = new int[]{107,40,9,7,4,7,99,0,6,20};
//public static int[] code = new int[]{108,20,9,7,4,7,99,0,6,20};
//public static int[] code = new int[]{1001,8,9,7,4,7,99,0,6,20};
//public static int[] code = new int[]{1002,8,9,7,4,7,99,0,6,20};
//public static int[] code = new int[]{1005,7,9,1005,4,6,99,0,6,20};
//    public static int[] code = new int[]{1006,4,9,1006,7,6,99,0,6,20};
//public static int[] code = new int[]{1007,8,9,7,4,7,99,0,10,20};
//    public static int[] code = new int[]{1008,8,9,7,4,7,99,0,9,20};
//    public static int[] code = new int[]{1101,8,9,7,4,7,99,0,9,20};
//    public static int[] code = new int[]{1102,8,9,7,4,7,99,0,9,20};
//    public static int[] code = new int[]{1105,0,9,1105,4,6,99,0,9,20};
//    public static int[] code = new int[]{1106,8,9,1106,0,6,99,0,9,20};
//    public static int[] code = new int[]{1107,10,9,7,4,7,99,0,9,20};
//    public static int[] code = new int[]{1108,8,8,7,4,7,99,0,9,20};

    public static int[] initialCode =
            new int[]{ 3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 34, 59, 68, 85, 102, 183, 264, 345, 426, 99999, 3, 9,
                    101, 3, 9, 9, 102, 3, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 4, 9, 1001, 9, 2, 9, 1002, 9, 2, 9, 101, 5, 9,
                    9, 102, 5, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 4, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 1002, 9, 2, 9, 1001,
                    9, 5, 9, 4, 9, 99, 3, 9, 1002, 9, 3, 9, 1001, 9, 5, 9, 102, 3, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9,
                    4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9,
                    2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101,
                    1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9,
                    3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9,
                    4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 2,
                    9, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9,
                    1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9,
                    3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 99, 3, 9, 1002, 9,
                    2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9,
                    1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9,
                    3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9,
                    2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9,
                    101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3,
                    9, 101, 2, 9, 9, 4, 9, 99 };

//    public static int[] initialCode = { 3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,
//27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5 };
    public static int permCount = 0;
    public static int[] perms = new int[ 600 ];

    public static void main( String[] args )
    {
        heapAlg();
        int out = 0;
        int[] outCombo = new int[ 5 ];
        boolean calculating;
        for ( int i = 0; i < 600; i += 5 )
        {
            calculating = true;

            IntCodeMachine amp1 = new IntCodeMachine( perms[ i ], initialCode );
            IntCodeMachine amp2 = new IntCodeMachine( perms[ i + 1 ], initialCode );
            IntCodeMachine amp3 = new IntCodeMachine( perms[ i + 2 ], initialCode );
            IntCodeMachine amp4 = new IntCodeMachine( perms[ i + 3 ], initialCode );
            IntCodeMachine amp5 = new IntCodeMachine( perms[ i + 4 ], initialCode );

            amp1.setInput( 0 );

            while(calculating)
            {
                if(amp1.isPaused())
                {
                    amp1.setInput( amp5.fetchOutput() );
                    amp1.unpause();
                }
                amp1.run();

                if(amp2.isPaused())
                {
                    amp2.unpause();
                }
                amp2.setInput( amp1.fetchOutput() );
                amp2.run();

                if(amp3.isPaused())
                {
                    amp3.unpause();
                }
                amp3.setInput( amp2.fetchOutput() );
                amp3.run();

                if(amp4.isPaused())
                {
                    amp4.unpause();
                }
                amp4.setInput( amp3.fetchOutput() );
                amp4.run();

                if(amp5.isPaused())
                {
                    amp5.unpause();
                }
                amp5.setInput( amp4.fetchOutput() );
                amp5.run();

                if( !amp5.isPaused() )
                {
                    calculating = false;
                }
            }


            if ( amp5.fetchOutput() > out )
            {
                out = amp5.fetchOutput();
                outCombo[ 0 ] = perms[ i ];
                outCombo[ 1 ] = perms[ i + 1 ];
                outCombo[ 2 ] = perms[ i + 2 ];
                outCombo[ 3 ] = perms[ i + 3 ];
                outCombo[ 4 ] = perms[ i + 4 ];
            }

            System.out.println( "** next permutation **");

        }

        System.out.println( " answer is : " + out );
        System.out.println(Arrays.toString( outCombo ));

    }

    public static void heapAlg()
    {
        int[] a = { 5, 6, 7, 8, 9 };
        heapPermutation( a, a.length, a.length );
    }

    public static void heapPermutation( int a[], int size, int n )
    {
        // if size becomes 1 then prints the obtained
        // permutation
        if ( size == 1 )
        {
            printArr( a, n );
        }

        for ( int i = 0; i < size; i++ )
        {
            heapPermutation( a, size - 1, n );

            // if size is odd, swap first and last
            // element
            if ( size % 2 == 1 )
            {
                int temp = a[ 0 ];
                a[ 0 ] = a[ size - 1 ];
                a[ size - 1 ] = temp;
            }

            // If size is even, swap ith and last
            // element
            else
            {
                int temp = a[ i ];
                a[ i ] = a[ size - 1 ];
                a[ size - 1 ] = temp;
            }
        }
    }

    public static void printArr( int a[], int n )
    {
        for ( int i = 0; i < n; i++ )
        {
            perms[ permCount + i ] = a[ i ];
        }
        permCount += 5;
    }

}
